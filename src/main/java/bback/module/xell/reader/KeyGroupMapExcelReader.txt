package module.bbackjk.excel.core.reader;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import module.bbackjk.excel.core.exceptions.ExcelReadException;
import module.bbackjk.excel.core.util.ExcelUtils;
import org.apache.poi.ss.usermodel.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.util.*;

@NoArgsConstructor
@Slf4j
public class KeyGroupMapExcelReader implements GridExcelReader<Map<String, List<String>>> {

    protected InputStream is;

    public KeyGroupMapExcelReader(String filePath) throws FileNotFoundException {
        this(new FileInputStream(filePath));
    }

    public KeyGroupMapExcelReader(MultipartFile file) throws IOException {
        this(file.getInputStream());
    }

    public KeyGroupMapExcelReader(InputStream is) {
        this.is = is;
    }

    @Override
    public Class<Map<String, List<String>>> getClassType() {
        return ;
    }

    @Override
    public void setFile(String filename) throws ExcelReadException {
        try {
            this.setFile(new FileInputStream(filename));
        } catch (FileNotFoundException e) {
            throw new ExcelReadException(e);
        }
    }

    @Override
    public void setFile(MultipartFile file) throws ExcelReadException {
        try {
            this.setFile(file.getInputStream());
        } catch (IOException e) {
            throw new ExcelReadException(e);
        }
    }

    @Override
    public void setFile(InputStream is) throws ExcelReadException {
        this.is = is;
    }

    @Override
    public List<Map<String, List<String>>> read() throws ExcelReadException {
        return this.read(ExcelUtils.DEFAULT_HEADER_SKIP_COUNT);
    }

    @Override
    public List<Map<String, List<String>>> read(int headerSkipCount) throws ExcelReadException {
        if (this.is == null) {
            throw new ExcelReadException("파일을 찾을 수 없습니다.");
        }
        try (Workbook wb = WorkbookFactory.create(this.is)) {
            Sheet sheet = wb.getSheetAt(0);
            int totalRows = sheet.getPhysicalNumberOfRows();
            List<Map<String, List<String>>> resultList = new ArrayList<>(totalRows - headerSkipCount); // 총 row 수 - header row 수
            resultList.addAll(this.makeDataListByBody(sheet, headerSkipCount));
            return resultList;
        } catch (Exception e) {
            throw new ExcelReadException(e);
        }
    }

    protected List<String> getHeaderValues(Sheet sheet, int skipCount) {
        List<String> headers = new ArrayList<>();
        for (int i=0; i<skipCount;i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            int totalColumns = row.getPhysicalNumberOfCells();
            for (int j = 0; j < totalColumns; j++) {    // row 의 cell 반복
                Cell cell = row.getCell(j);
                if (cell == null) continue;
                headers.add(cell.getStringCellValue());
            }
        }
        return headers;
    }

    protected List<Map<String, List<String>>> makeDataListByBody(Sheet sheet, int headerSkipCount) {
        List<Map<String, List<String>>> resultList = new ArrayList<>();
        Map<String, List<String>> columnGroupValueMap = new HashMap<>();
        List<String> headerValues = this.getHeaderValues(sheet, headerSkipCount);

        int totalRowCount = sheet.getPhysicalNumberOfRows();
        for (int i = headerSkipCount; i < totalRowCount; i++) {   // row 반복
            Row row = sheet.getRow(i);
            if (row == null) continue;

            int totalColumnCount = row.getPhysicalNumberOfCells();
            for (int j = 0; j < totalColumnCount; j++) {    // row 의 cell 반복
                Cell cell = row.getCell(j);
                if (cell == null) continue;

                List<String> columnValues = columnGroupValueMap.computeIfAbsent(headerValues.get(j), list -> new ArrayList<>());
                columnValues.add(this.getCellValue(cell));
            }
        }
        if ( !columnGroupValueMap.isEmpty() ) {
            resultList.add(columnGroupValueMap);
        }

        return resultList;
    }

    protected String getCellValue(Cell cell) {
        String result = null;
        switch (cell.getCellType()) {
            case STRING:
                result = cell.getStringCellValue();
                break;
            case NUMERIC:
                if ( DateUtil.isCellDateFormatted(cell) ) { // date format
                    LocalDateTime ldt = cell.getLocalDateTimeCellValue();
                    result = ldt.toString();
                } else {
                    result = String.format("%.0f", cell.getNumericCellValue());
                }
                break;
            case BLANK:
                result = "";
                break;
            default:
                log.warn("허용되지 않은 엑셀 데이터 유형입니다. 파일을 확인해주세요. CellType :: {}", cell.getCellType());
        }

        return result;
    }
}
